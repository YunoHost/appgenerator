#!/bin/bash
### App file generated with YoloGen, the YunoHost app generator, version {{ data['GENERATOR_VERSION'] }}.

{% if data.generator_mode == 'tutorial' -%} # This is the tutorial version of the app.
# It contains extra commands to explain what should be done in case you want to adjust some part of the script.
# Once you are done, you may remove them.
{% endif %}

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

{% if data.generator_mode == 'tutorial' -%}
### Settings are automatically loaded as bash variables
### in every app script context, therefore typically these will exist:
### - $domain
### - $path
### - $language
### - $install_dir
### - $port
### ...

### In the context of upgrade,
### - resources are automatically provisioned / updated / deleted (depending on existing resources)
### - a safety backup is automatically created by the core and will be restored if the upgrade fails
{% endif %}

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
{% if data.generator_mode == 'tutorial' -%}
#ynh_script_progression "Ensuring downward compatibility..."

### N.B. : the following setting migration snippets are provided as *EXAMPLES*
### of what you may want to do in some cases (e.g. a setting was not defined on
### some legacy installs and you therefore want to initiaze stuff during upgrade)

# If db_name doesn't exist, create it
# ynh_app_setting_set_default --key=db_name --value="$(ynh_sanitize_dbid --db_name=$app)"

# If install_dir doesn't exist, create it
# ynh_app_setting_set_default --key=install_dir --value="/var/www/$app"
{% endif %}

{% if data.main_technology not in ["php", "none"] -%}
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression "Stopping a systemd service..."

ynh_systemctl --service="$app" --action="stop"
{% endif %}

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Upgrading source files..."

ynh_setup_source --dest_dir="$install_dir" --full_replace  --keep=".env"
{{ data.custom_config_file }}

{% if data.generator_mode == 'tutorial' -%}
# $install_dir will automatically be initialized with some decent
# permission by default ... however, you may need to recursively reapply
# ownership to all files such as after the ynh_setup_source step
{% endif %}
chown -R $app:www-data "$install_dir"

#=================================================
# REAPPLY SYSTEM CONFIGURATIONS
#=================================================
ynh_script_progression "Upgrading system configurations related to $app..."

{% if data.generator_mode == 'tutorial' -%}
# This should be a literal copypasta of what happened in the install's "System configuration" section
{% endif %}

{% if data.main_technology == "php" -%}
ynh_config_add_phpfpm
{% endif %}

ynh_config_add_nginx

{% if data.main_technology not in ["php", "none"] -%}
ynh_config_add_systemd

yunohost service add "$app" --log="/var/log/$app/$app.log"
{% endif %}

{% if data.use_logrotate -%}
ynh_config_add_logrotate
{% endif %}

{% if data.use_fail2ban -%}
ynh_config_add_fail2ban --logpath="/var/log/nginx/${domain}-error.log" --failregex="{{ data.fail2ban_regex }}"
{% endif %}

{% if data.use_cron -%}
cron_path="/etc/cron.d/$app"
ynh_config_add --template="../conf/task.cron" --destination="$cron_path"
chown root: "$cron_path"
chmod 644 "$cron_path"
{% endif %}

{% if data.use_custom_config_file -%}
#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression "Updating a configuration file..."

{% if data.generator_mode == 'tutorial' -%}
### Same as during install
###
### The file will automatically be backed-up if it's found to be manually modified (because
### ynh_add_config keeps track of the file's checksum)
{% endif %}

ynh_config_add --template="{{ data.custom_config_file }}" --destination="$install_dir/{{ data.custom_config_file }}"

{% if data.generator_mode == 'tutorial' -%}
# FIXME: this should be handled by the core in the future
# You may need to use chmod 600 instead of 400,
# for example if the app is expected to be able to modify its own config
{% endif %}
chmod 400 "$install_dir/{{ data.custom_config_file }}"
chown $app:$app "$install_dir/{{ data.custom_config_file }}"

{% if data.generator_mode == 'tutorial' -%}
### For more complex cases where you want to replace stuff using regexes,
### you shoud rely on ynh_replace_string (which is basically a wrapper for sed)
### When doing so, you also need to manually call ynh_store_file_checksum
###
### ynh_replace_string --match_string="match_string" --replace_string="replace_string" --target_file="$install_dir/{{ data.custom_config_file }}"
### ynh_store_file_checksum --file="$install_dir/{{ data.custom_config_file }}"
{% endif %}

{% endif %}

{% if data.main_technology not in ["php", "none"] -%}
#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression "Starting a systemd service..."

ynh_systemctl --service="$app" --action="start"
{% endif %}

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Upgrade of $app completed"
